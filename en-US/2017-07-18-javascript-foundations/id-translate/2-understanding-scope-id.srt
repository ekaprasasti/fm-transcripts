WEBVTT

1
00: 00: 00.000 --> 00: 00: 02.640
& gt; & gt; Kyle Simpson: Pertama,
definisi apa yang perlu Anda ketahui.

2
00: 00: 02.640 --> 00: 00: 04.447
Scope berarti tempat untuk mencari sesuatu.

3
00: 00: 04.447 --> 00: 00: 08.296
Ini seperangkat aturan yang membantu kita untuk
mencari tahu di mana barang-barang ditemukan,

4
00: 00: 08.296 --> 00: 00: 09.858
dan bagaimana menyelesaikan sesuatu.

5
00: 00: 09.858 --> 00: 00: 12.403
Jadi untuk mendefinisi itu kita harus bertanya, atau

6
00: 00: 12.403 --> 00: 00: 16.280
harus memunculkan setidaknya
dua pertanyaan dalam pikiranmu.

7
00: 00: 16.280 --> 00: 00: 21.080
Pertanyaan pertama yang seharusnya muncul
pikiran Anda adalah, apa yang kita cari?

8
00: 00: 21.080 --> 00: 00: 22.610
Pertanyaan bagus.

9
00: 00: 22.610 --> 00: 00: 24.780
Hal yang kami cari
adalah variabel apa pun,

10
00: 00: 24.780 --> 00: 00: 28.620
pengenal apa pun, terlepas dari apa pun
bagaimana itu digunakan dalam program kita.

11
00: 00: 28.620 --> 00: 00: 31.030
Ternyata hanya ada dua
cara yang dapat digunakan.

12
00: 00: 31.030 --> 00: 00: 35.229
Variabel dapat muncul dalam
posisi di mana kita mendapatkan kembali nilai

13
00: 00: 35.229 --> 00: 00: 39.491
darinya, atau dapat muncul dalam posisi
di mana kita menambahkan nilai untuk itu, atau

14
00: 00: 39.491 --> 00: 00: 41.283
di mana ketika kita menetapkan nilai ke dalamnya.

15
00: 00: 41.283 --> 00: 00: 46.068
Hanya ada dua tempat sebuat variabel
dapat muncul, tetapi di mana pun itu muncul,

16
00: 00: 46.068 --> 00: 00: 48.476
variabel itu milik beberapa ember.

17
00: 00: 48.476 --> 00: 00: 52.304
Saya suka berpikir secara visual tentang program kita
sebagai divisi di mana setiap variabel

18
00: 00: 52.304 --> 00: 00: 55.665
adalah sebuat kelereng berwarna, dan ini adalah 
cara berpikir visual saya tentang hal itu.

19
00: 00: 55.665 --> 00: 00: 57.755
Ini seperti memilah semua kelereng, jadi

20
00: 00: 57.755 --> 00: 01: 00.098
Saya menaruh semua kelereng merah
dalam ember merah dan

21
00: 01: 00.098 --> 00: 01: 05.170
semua kelereng biru di ember biru,
dan kelereng hijau di ember hijau.

22
00: 01: 05.170 --> 00: 01: 08.912
Scope adalah seperangkat aturan yang dengannya
kita menyortir semua kelereng itu, dan

23
00: 01: 08.912 --> 00: 01: 13.516
ketika kita menginginkan kelereng merah, kita tahu
ember apa yang kita tuju dan mengeluarkannya, oke?

24
00: 01: 13.516 --> 00: 01: 15.480
Jadi itulah pertanyaan pertama,
apa yang kita cari?

25
00: 01: 15.480 --> 00: 01: 17.430
Kita mencari kelereng berwarna.

26
00: 01: 17.430 --> 00: 01: 20.710
Kita mencari pengidentifikasi itu, tapi
ada pertanyaan lain yang lebih halus.

27
00: 01: 20.710 --> 00: 01: 22,990
Dan saya ingin mengambil beberapa
momen untuk berbicara tentang scope

28
00: 01: 24.400 --> 00: 01: 29.840
dari perspektif apa yang terjadi
di dalam engine JavaScript.

29
00: 01: 29.840 --> 00: 01: 33.809
Saya sudah mengatakan ini, jadi saya sudah
memberikannya, tetapi banyak dari Anda yang

30
00: 01: 33.809 --> 00: 01: 37.677
mendengar JavaScript adalah bahasa
interpreted, ini adalah bahasa yang dinamis.

31
00: 01: 37.677 --> 00: 01: 40.970
Jadi jika saya menegaskan kepada Anda,
JavaScript benar-benar,

32
00: 01: 40.970 --> 00: 01: 45.720
secara positif bahasa compiled, itu
mungkin berlawanan dengan beberapa intuisi Anda.

33
00: 01: 45.720 --> 00: 01: 49.594
Anda selalu diberitahu sebelumnya
itu adalah bahasa interpreted, dan

34
00: 01: 49.594 --> 00: 01: 54.081
Saya akan memberi tahu Anda secara mutlak, dan secara positif,
JavaScript adalah bahasa compiled.

35
00: 01: 54.081 --> 00: 01: 55.923
Jadi saya ingin menggali itu sebentar,

36
00: 01: 55.923 --> 00: 01: 59.740
karena pertanyaan kedua ini seharusnya
yang ditanyakan adalah, siapa yang melakukan pencarian?

37
00: 01: 59.740 --> 00: 02: 01.190
Siapa yang mencari?

38
00: 02: 01.190 --> 00: 02: 06.007
Apakah hanya interpreter bahasa JavaScript yang mencoba
untuk menemukan memori yang dialokasikan secara dinamis atau

39
00: 02: 06.007 --> 00: 02: 06.778
sesuatu?

40
00: 02: 06.778 --> 00: 02: 09.349
Atau ada sesuatu yang lebih dalam terjadi?

41
00: 02: 09.349 --> 00: 02: 16.000
Dan ini benar-benar inti
dari seluruh unit diskusi ini,

42
00: 02: 16.000 --> 00: 02: 20.202
apakah scope itu merupakan proses waktu kompilasi.

43
00: 02: 20.202 --> 00: 02: 23.370
Bahwa program kita berjalan
melalui langkah kompilasi, dan

44
00: 02: 23.370 --> 00: 02: 27.690
pada saat kompilasi semua 
keputusan scope ini akan terjadi.

45
00: 02: 28.990 --> 00: 02: 33.610
Kami suka berpikir itu menjadi lebih seperti
runtime, JavaScript itu

46
00: 02: 33.610 --> 00: 02: 38.557
adalah suatu bahasa program single pass interpreted,
tetapi sebenarnya tidak seperti itu.

47
00: 02: 38.557 --> 00: 02: 43.520
Dan saya akan menunjukkan beberapa
poin di seluruh sisa

48
00: 02: 43.520 --> 00: 02: 47.698
diskusi kita di mana bedanya
bisa sangat dramatis.

49
00: 02: 47.698 --> 00: 02: 52.308
Di mana kita katakan perbedaannya, yah,
Saya pikir itu dalam single pass, dan

50
00: 02: 52.308 --> 00: 02: 55.118
Saya pikir variabel seharusnya menjadi nilai ini,
dan

51
00: 02: 55.118 --> 00: 02: 58.235
ternyata itu adalah sesuatu
yang sama sekali berbeda.

52
00: 02: 58.235 --> 00: 03: 02.431
Dan Anda seperti, saya tidak mengerti di mana
pemikiran saya yang salah, dan akar

53
00: 03: 02.431 --> 00: 03: 07.400
masalah pemikiran itu adalah Anda sedang berpikir
tentang JavaScript sebagai single pass, oke?

54
00: 03: 07.400 --> 00: 03: 09.145
Jadi JavaScript benar-benar di kompilasi.

55
00: 03: 09.145 --> 00: 03: 13.933
[BATUK] Biarkan aku menggali itu sebentar.
& gt; & gt; Kyle Simpson: Ketika orang berkata

56
00: 03: 13.933 --> 00: 03: 16.670
JavaScript bukan bahasa yang dikompilasi,

57
00: 03: 16.670 --> 00: 03: 21.662
itu adalah bahasa yang diterjemahkan secara dinamis,
dan mereka membandingkannya dengan apa yang 

58
00: 03: 21.662 --> 00: 03: 26.680
secara tradisional lebih dianggap sebagai bahasa
compiled, seperti C ++ atau Java.

59
00: 03: 26.680 --> 00: 03: 30.809
Apa yang biasanya mereka pikirkan
dari hal itu adalah model distribusi untuk

60
00: 03: 30.809 --> 00: 03: 33.108
hasil akhir dari kompilasi.

61
00: 03: 33.108 --> 00: 03: 36.558
Mereka biasanya berpikir,
baik, bahasa yang dikompilasi,

62
00: 03: 36.558 --> 00: 03: 41.250
Saya menjalankannya melalui compiler dan saya hasilkan
beberapa kode yang dapat dieksekusi di luar, dan

63
00: 03: 41.250 --> 00: 03: 44.363
maka saya mengambil kode yang dapat dieksekusi dan
Saya mendistribusikannya.

64
00: 03: 44.363 --> 00: 03: 48.044
Jadi Anda berpikir, yah, saya melakukannya dengan Java,
Saya menghasilkan byte code,

65
00: 03: 48.044 --> 00: 03: 51.320
Saya melakukannya dengan C ++ dan
Saya menghasilkan binary 1s dan 0s.

66
00: 03: 51.320 --> 00: 03: 55.064
Tetapi dengan JavaScript,
Sebelumnya saya tidak mengkompilasi dan

67
00: 03: 55.064 --> 00: 03: 59.660
menghasilkan beberapa kode yang dapat dieksekusi,
Saya mengirim source code.

68
00: 03: 59.660 --> 00: 04: 05.276
Jadi kami pikir paradigma kami adalah,
mode distribusi apa yang di pakai untuk program ini?

69
00: 04: 05.276 --> 00: 04: 10.260
Apakah kita mendistribusikannya sebagai executable
code atau sebagai source code?

70
00: 04: 10.260 --> 00: 04: 15.110
Saya ingat di CS,
waktu yang sangat lama sekarang, tapi

71
00: 04: 15.110 --> 00: 04: 18.910
Saya ingat duduk di kursus CS dan
memiliki seorang instruktur

72
00: 04: 18.910 --> 00: 04: 23.450
pada dasarnya secara mendalam bahwa itu merupakan
perbedaan utama antara bahasa.

73
00: 04: 23.450 --> 00: 04: 25.000
Tapi saya pikir itu salah.

74
00: 04: 25.000 --> 00: 04: 28.532
Saya pikir saat itu mungkin ya atau
mungkin bukan validasi yang benar,

75
00: 04: 28.532 --> 00: 04: 31.918
ada nuansa di sana,
bahkan untuk memilih bagian di sana.

76
00: 04: 31.918 --> 00: 04: 35.904
Tapi sementara itu mungkin benar atau mungkin tidak benar,
Saya tidak berpikir itu merupakan

77
00: 04: 35.904 --> 00: 04: 40.298
perbedaan yang relevan antara
bahasa compiled dan bahasa interpreted.

78
00: 04: 40.298 --> 00: 04: 43.281
Biarkan saya membuktikan kepada Anda untuk sesaat
bahwa Java Script dikompilasi.

79
00: 04: 43.281 --> 00: 04: 45.043
Ada banyak cara yang bisa saya lakukan.

80
00: 04: 45.043 --> 00: 04: 49.214
Kami dapat membuka source code untuk
V8 dan kami akan menemukan bahwa sebenarnya ada

81
00: 04: 49.214 --> 00: 04: 53.727
kompilator di sana, kode sumber untuk
Mozilla SpiderMonkey, ada kompilator.

82
00: 04: 53.727 --> 00: 04: 56.150
Tapi biarkan aku membuktikannya
pada Anda lebih pragmatis.

83
00: 04: 56.150 --> 00: 05: 01.378
Pernahkah Anda memiliki bug JavaScript,
siapa saja?

84
00: 05: 01.378 --> 00: 05: 04.345
Oke, bagus, kita semua adalah teman,
kita semua pernah menulis bug sebelumnya.

85
00: 05: 04.345 --> 00: 05: 08.062
Bug yang pernah anda punya dan
sesuatu di mana Anda secara sintaksis

86
00: 05: 08.062 --> 00: 05: 12.927
melakukan sesuatu yang salah, seperti kamu menghilangkan
koma, atau Anda meninggalkan kurung kurawal, atau

87
00: 05: 12.927 --> 00: 05: 15.970
semacam kesalahan sintaks yang terjadi?

88
00: 05: 15.970 --> 00: 05: 19.545
Oke, dalam skenario itu,
karena kita semua menganggukkan kepala kita,

89
00: 05: 19.545 --> 00: 05: 23.592
dalam skenario itu, jika Anda pernah
menciptakan kesalahan sintaks dalam suatu program,

90
00: 05: 23.592 --> 00: 05: 28.127
apakah kamu pernah berpikir untuk dirimu sendiri, yah,
Wah, kesalahan sintaks itu ada di baris sepuluh.

91
00: 05: 28.127 --> 00: 05: 33.916
Tetapi ketika saya pergi untuk menjalankan program, itu
tidak menjalankan baris satu sampai sembilan pertama

92
00: 05: 33.916 --> 00: 05: 36.435
lalu ia memberi saya error di jalur sepuluh.

93
00: 05: 37.615 --> 00: 05: 38.805
Kapan ia memberi saya error?

94
00: 05: 40.025 --> 00: 05: 43.356
Sebelum berjalan pada baris 1, kan?

95
00: 05: 43.356 --> 00: 05: 45.643
Nah, bagaimana kamu mengira ia bisa melakukan itu?

96
00: 05: 45.643 --> 00: 05: 50.677
Bagaimana Anda mengira JavaScript tahu
sebelumnya bahwa akan ada

97
00: 05: 50.677 --> 00: 05: 55.261
menjadi kesalahan sintaks pada baris sepuluh
sebelum menjalankan baris satu?

98
00: 05: 55.261 --> 00: 05: 57.175
Sangat sederhana
untuk menjawab pertanyaan itu,

99
00: 05: 57.175 --> 00: 05: 59.469
karena mesin JavaScript
mengkompilasi kode Anda terlebih dahulu.

100
00: 06: 00.870 --> 00: 06: 05.870
Dan kompilasi memvalidasi sintaks
jauh sebelum hal itu di serahkan

101
00: 06: 05.870 --> 00: 06: 07.840
ke beberapa bagian mesin untuk dieksekusi.

102
00: 06: 09.660 --> 00: 06: 11.060
Jadi minimal,

103
00: 06: 11.060 --> 00: 06: 15.160
Saya perlu menyesuaikan pemikiran Anda
bagaimana Anda memproses program JavaScript.

104
00: 06: 15.160 --> 00: 06: 17.805
Dari memikirkan ini sebagai sebuah single pass,

105
00: 06: 17.805 --> 00: 06: 22.507
kita akan mengikuti semua program
dari atas ke bawah, untuk memikirkan hal ini,

106
00: 06: 22.507 --> 00: 06: 25.210
minimal, sebagai dual pass.
& gt; & gt; Speaker 2: [CROSSTALK] Apakah Anda menggunakannya

107
00: 06: 25.210 --> 00: 06: 26.698
secara bergantian dengan parsing?

108
00: 06: 26.698 --> 00: 06: 28.710
Maksudku,
itu benar-benar hanya memparsingnya, kan?

109
00: 06: 28.710 --> 00: 06: 32.340
Apakah itu sama dengan kompilasi?
& gt; & gt; Kyle Simpson: Baiklah, oke,

110
00: 06: 32.340 --> 00: 06: 33.460
itu pertanyaan yang bagus.

111
00: 06: 33.460 --> 00: 06: 40.190
Jadi pertanyaannya adalah, apakah saya menggunakan
kompilasi secara bergantian dengan parsing?

112
00: 06: 41.700 --> 00: 06: 42.200
Iya dan tidak.

113
00: 06: 43.500 --> 00: 06: 48.130
Bagian penting dari apa yang sedang kita bicarakan
adalah tentang fakta bahwa parsing memang dibutuhkan

114
00: 06: 48.130 --> 00: 06: 51.432
terjadi, karena jelas, parsing dibutuhkan
terjadi agar kompilasi bisa terjadi.

115
00: 06: 51.432 --> 00: 06: 57.103
Tetapi kompilasi, ada beberapa
tahapan untuk apa yang kami maksud dengan kompilator,

116
00: 06: 57.103 --> 00: 07: 01.716
dan aku akan sedikit menyimpang
ke teori kompilator.

117
00: 07: 01.716 --> 00: 07: 04.010
Saya adalah salah satu dari orang-orang yang
sebenarnya menikmati kelas ini.

118
00: 07: 04.010 --> 00: 07: 07.220
Itu adalah kelas favorit saya di CS,
Saya suka teori compiler.

119
00: 07: 07.220 --> 00: 07: 09.854
Saya menulis kompiler untuk bersenang-senang sekarang.

120
00: 07: 09.854 --> 00: 07: 12.865
Saya mengerti banyak orang
mungkin tidak seperti itu, tapi

121
00: 07: 12.865 --> 00: 07: 15.096
Otakku sepertinya menyukai ini, kan?

122
00: 07: 15.096 --> 00: 07: 17.250
Jadi ada banyak
tahapan ke kompilator.

123
00: 07: 17.250 --> 00: 07: 21.754
Langkah terakhir kompilasi
adalah pembuatan kode dan

124
00: 07: 21.754 --> 00: 07: 25.426
menautkannya untuk membuat kode yang dapat dieksekusi.

125
00: 07: 25.426 --> 00: 07: 28.317
Jadi, apakah itu terjadi dengan JavaScript?

126
00: 07: 28.317 --> 00: 07: 33.153
Atau itu hanya di tahap pertama,
di mana kita memiliki lexing, tokenization, dan

127
00: 07: 33.153 --> 00: 07: 36.060
parsing ke abstrak syntax tree?

128
00: 07: 36.060 --> 00: 07: 37.170
Yang mana dari keduanya itu benar?

129
00: 07: 38.200 --> 00: 07: 39.980
Ada dua cara untuk menjawab pertanyaan ini.

130
00: 07: 39.980 --> 00: 07: 42.130
Pertama, di tingkat paling dasar,

131
00: 07: 42.130 --> 00: 07: 45.340
enginge JavaScript benar-benar
sebuah pembuat code.

132
00: 07: 46.530 --> 00: 07: 50.928
Hal itu benar-benar menghasilkan representasi
perantara dari source code ke

133
00: 07: 50.928 --> 00: 07: 54.819
hal yang ditangani didalam
engine JavaScript, yang sebenarnya,

134
00: 07: 54.819 --> 00: 07: 58.428
dalam beberapa kasus,
disebut JavaScript virtual machine.

135
00: 07: 58.428 --> 00: 08: 02.827
Itu sebenarnya mirip dengan byte code, tidak
terlalu berbeda dari apa yang ditangani

136
00: 08: 02.827 --> 00: 08: 06.275
pada Java ketika Anda mengkompilasi program Java,
Anda menghasilkan kode byte.

137
00: 08: 06.275 --> 00: 08: 10.849
Sekarang, byte code yang dibagikan ke
mesin virtual JavaScript dengan tidak

138
00: 08: 10.849 --> 00: 08: 14.604
portabel, itu bukan platform
independen seperti halnya dengan Java,

139
00: 08: 14.604 --> 00: 08: 17.000
tetapi ini mirip dengan byte code, oke?

140
00: 08: 17.000 --> 00: 08: 20.770
Seperangkat instruksi itu
adalah representasi biner.

141
00: 08: 20.770 --> 00: 08: 22.870
Jadi itu tidak benar-benar ditangani, katakanlah,

142
00: 08: 22.870 --> 00: 08: 27.560
sebuah pohon sintaks abstrak, sebenarnya
representasi antara biner.

143
00: 08: 28.700 --> 00: 08: 33.520
Tetapi mesin JavaScript modern sebenarnya
luar biasa lebih rumit dari yang saya

144
00: 08: 33.520 --> 00: 08: 34.460
kerjakan sekarang.

145
00: 08: 34.460 --> 00: 08: 38.606
Karena ada banyak hal
seperti jit dan hal-hal lain seperti itu,

146
00: 08: 38.606 --> 00: 08: 41.239
JIT adalah J-I-T, Just-in-Time compilation.

147
00: 08: 41.239 --> 00: 08: 44.380
Dan faktanya, dan
bagian ini saya bahkan tidak sepenuhnya mengerti,

148
00: 08: 44.380 --> 00: 08: 45.724
bahkan dengan pengetahuan saya tentang CS.

149
00: 08: 45.724 --> 00: 08: 49.856
Saya tidak sepenuhnya mengerti bagaimana
sebagian JIT mengkompilasi bagian dari kode.

150
00: 08: 49.856 --> 00: 08: 51.420
Bagi saya itu semua atau tidak sama sekali.

151
00: 08: 51.420 --> 00: 08: 53.010
Anda bisa mengkompilasi atau
Anda tidak melakukan kompilasi.

152
00: 08: 53.010 --> 00: 08: 56.190
Tetapi sebenarnya,
mesin modern akan melalui tiga atau

153
00: 08: 56.190 --> 00: 08: 58.670
empat JIT yang berbeda untuk dilewati.

154
00: 08: 58.670 --> 00: 09: 02.280
Mereka memiliki JIT yang cepat, dan
kemudian JIT yang lebih lambat, dan yang lebih lambat.

155
00: 09: 02.280 --> 00: 09: 06.331
Mereka melalui beberapa kali dan
mereka mencari tahu lebih banyak tentang program ini

156
00: 09: 06.331 --> 00: 09: 09.713
mereka melewatinya, dan
lalu mereka melacak, baik, dengan runtime.

157
00: 09: 09.713 --> 00: 09: 13.536
Dan kemudian mesin dikompilasi ulang
berdasarkan apa yang diketahuinya.

158
00: 09: 13.536 --> 00: 09: 17.257
Karena melihat apa yang terjadi dalam waktu proses,
itu akan membuang seperangkat dugaan dan

159
00: 09: 17.257 --> 00: 09: 19.522
mengkompilasi ulang set lain, dan hot swap didalamnya.

160
00: 09: 19.522 --> 00: 09: 21.137
Ada segala macam
kerumitan yang terjadi.

161
00: 09: 21.137 --> 00: 09: 23.927
Jadi itu sebenarnya bukan two pass.

162
00: 09: 23.927 --> 00: 09: 24.936
Ini jauh lebih rumit.

163
00: 09: 24.936 --> 00: 09: 27.684
Tetapi jika kita hanya menyederhanakannya
ke dalam two pass,

164
00: 09: 27.684 --> 00: 09: 32.335
ada single step yang dikompilasi,
yang melakukan parsing, menghasilkan beberapa

165
00: 09: 32.335 --> 00: 09: 37.430
representasi program tersebut yang
mengeksekusi yang di ketahui dan apa yang harus dilakukan.

166
00: 09: 37.430 --> 00: 09: 40.907
Saya akan menyebut itu IR, perantara
representasi, seperti byte code.

167
00: 09: 40.907 --> 00: 09: 43.140
Dan kemudian pass kedua
yang mengeksekusinya.

168
00: 09: 44.760 --> 00: 09: 48.281
Jadi ketika saya mengatakan kompilasi, maksud saya JavaScript
melewati dua laluan itu.

169
00: 09: 48.281 --> 00: 09: 49.753
Bantuan itu menjawab pertanyaan itu?
& gt; & gt; Pembicara 2: Ya, ya.

170
00: 09: 49.753 --> 00: 09: 50.502
& gt; & gt; Kyle Simpson: Oke, jadi

171
00: 09: 50.502 --> 00: 09: 55.472
yang saya nyatakan adalah itu
pass pertama harus terjadi karena

172
00: 09: 55.472 --> 00: 09: 57.365
parsing harus terjadi.

173
00: 09: 57.365 --> 00: 10: 02.008
Kalau tidak, kita tidak akan pernah tahu tentang kesalahan
sintaksis pada baris sepuluh jika kita berada di jalur satu.

174
00: 10: 02.008 --> 00: 10: 06.660
Faktanya, masih ada lagi
bukti bahwa parsing sedang terjadi,

175
00: 10: 06.660 --> 00: 10: 09.484
karena JavaScript memiliki
satu set hal yang

176
00: 10: 09.484 --> 00: 10: 12.707
diberlakukan dalam parsing
tahap tata bahasa.

177
00: 10: 12.707 --> 00: 10: 15.685
Mereka diberlakukan seperti apa yang
disebut dengan error di awal.

178
00: 10: 15.685 --> 00: 10: 20.396
Misalnya, dalam strict mode, jika Anda
memiliki fungsi JavaScript yang memiliki dua

179
00: 10: 20.396 --> 00: 10: 23.574
parameter yang berbeda dengan
nama leksikal yang sama.

180
00: 10: 23.574 --> 00: 10: 28.208
Seperti Anda memiliki fungsi foo, dan kemudian Anda
mengatakan koma dalam signature function,

181
00: 10: 28.208 --> 00: 10: 30.060
itu bukan kesalahan sintaksis.

182
00: 10: 30.060 --> 00: 10: 32.580
Itu benar-benar sintaksis.

183
00: 10: 32.580 --> 00: 10: 36.380
Tapi itu masih terlempar
sebagai early static error.

184
00: 10: 36.380 --> 00: 10: 41.090
Dengan kata lain, sebelum program itu
pernah dijalankan, error dilemparkan untuk memberitahu Anda,

185
00: 10: 41.090 --> 00: 10: 44.110
Anda tidak diizinkan memiliki dua
parameter dengan nama yang sama.

186
00: 10: 44.110 --> 00: 10: 48.388
Itu hanya bisa terjadi jika ada
yang lolos penuh melalui program pertama kali

187
00: 10: 48.388 --> 00: 10: 52.530
melakukan semua parsing dan memvalidasi
kode, dan tahu segalanya yang

188
00: 10: 52.530 --> 00: 10: 56.410
mereka perlu tahu untuk memverifikasi bahwa ini
parameter yang sama, kan?

189
00: 10: 56.410 --> 00: 11: 00.588
Jadi harus ada
pass pertama yang terjadi.

190
00: 11: 00.588 --> 00: 11: 03.136
Jadi yang saya ingin Anda lakukan hanyalah

191
00: 11: 03.136 --> 00: 11: 07.440
mereset pemikiran Anda dari
one pass ke two pass.

192
00: 11: 07.440 --> 00: 11: 12.612
Pertama, pikirkan tentang ada pass ini
yang terjadi untuk memvalidasi program saya,

193
00: 11: 12.612 --> 00: 11: 16.521
dan selama itu berlalu
lexical scope akan diatur.

194
00: 11: 16.521 --> 00: 11: 19.790
Itu selama past
yang pertama saat scoping itu terjadi.

195
00: 11: 19.790 --> 00: 11: 21.630
Ini bukan saat pass yang kedua,

196
00: 11: 21.630 --> 00: 11: 26.950
itulah yang kebanyakan dari kita miliki
secara bebas datang untuk percaya, oke?

197
00: 11: 28.900 --> 00: 11: 31.260
Jadi JavaScript benar-benar
bahasa kompilasi.

198
00: 11: 31.260 --> 00: 11: 35.260
Faktanya, saya akan membuat kasus
arsitektur kompiler yang saya

199
00: 11: 35.260 --> 00: 11: 38.760
hanya dengan cepat menyinggung ada
jauh lebih canggih daripada

200
00: 11: 38.760 --> 00: 11: 42.300
setiap arsitektur kompilator untuk
bahasa lain yang ada.

201
00: 11: 42.300 --> 00: 11: 45.737
Karena kami menuntut lebih banyak
JavaScript, dan mereka punya semua

202
00: 11: 45.737 --> 00: 11: 48.897
teknik yang berbeda ini
tidak pernah relevan dengan hal-hal lain.

203
00: 11: 48.897 --> 00: 11: 53.360
Untuk kompiler C ++ menjadi JIT compiler
bahkan tidak masuk akal, kan?

204
00: 11: 53.360 --> 00: 11: 58.270
Karena Anda melakukan semua AOT,
itu di semua kompilasi di awal waktu.

205
00: 11: 58.270 --> 00: 12: 03.500
Jadi JavaScript harus melakukan lebih banyak lagi,
ini jauh lebih canggih.

206
00: 12: 03.500 --> 00: 12: 08.376
Sekarang, [BATUK] Aku akan membuat pernyataan
ini, ada tanda bintang

207
00: 12: 08.376 --> 00: 12: 13.087
di sini ketika saya mengatakan JavaScript
mengatur cakupannya berdasarkan fungsi.

208
00: 12: 13.087 --> 00: 12: 15.079
Itu tidak sepenuhnya benar.

209
00: 12: 15.079 --> 00: 12: 18.953
Kami akan berbicara tentang blok
melawatinya nanti di unit ini.

210
00: 12: 18.953 --> 00: 12: 22.219
Tetapi untuk sekarang,
kita akan menyederhanakan hal-hal dan

211
00: 12: 22.219 --> 00: 12: 26.250
katakanlah unit individu
scope adalah fungsinya, oke?

212
00: 12: 28.890 --> 00: 12: 33.890
Jadi inilah sepotong kode
yang tampak sederhana.

213
00: 12: 33.890 --> 00: 12: 38.135
Potongan kode ini tidak banyak
bahkan tidak terlihat seperti itu,

214
00: 12: 38.135 --> 00: 12: 39.660
karena itu hanya membuat beberapa variabel.

215
00: 12: 39.660 --> 00: 12: 42.990
Tidak ada logika atau percabangan atau
perulangan atau semua hal itu.

216
00: 12: 42.990 --> 00: 12: 46.472
Jadi Anda cenderung hanya menyortir
melewatkannya dan berkata, baiklah,

217
00: 12: 46.472 --> 00: 12: 48.418
ini tidak terlalu menarik.

218
00: 12: 48.418 --> 00: 12: 52.345
Saya mungkin akan memiliki slide ini untuk
20 atau 30 menit,

219
00: 12: 52.345 --> 00: 12: 55.626
karena ada cara lain untuk ini
dari yang Anda kira ada.

220
00: 12: 55.626 --> 00: 12: 59.161
Bagi kami untuk sepenuhnya membongkar apa artinya
ini menjadi sistem two pass,

221
00: 12: 59.161 --> 00: 13: 02.697
mulai mem-rewire otak kita
mulai berpikir sedikit lebih mirip

222
00: 13: 02.697 --> 00: 13: 04.450
dengan mesin JavaScript.

223
00: 13: 04.450 --> 00: 13: 08.980
Sebagian besar
kompleksitas teori kompilator

224
00: 13: 08.980 --> 00: 13: 11.530
bukan hal yang perlu kita lakukan
menyibukkan diri dengan itu.

225
00: 13: 11.530 --> 00: 13: 14.510
Orang seperti saya suka terobsesi tentang itu,
tapi ternyata tidak

226
00: 13: 14.510 --> 00: 13: 19.100
perlu untuk Anda akan menjadi ahli teori
kompilator untuk memahami JavaScript.

227
00: 13: 19.100 --> 00: 13: 23.790
Tetapi ada beberapa hal yang harus Anda lakukan
setidaknya secara sadar, oke?

228
00: 13: 23.790 --> 00: 13: 27.209
Jadi saya akan menggunakan beberapa terminologi yang berbeda,
beberapa konsep yang berbeda.

229
00: 13: 27.209 --> 00: 13: 30.825
Tetapi untuk sebagian besar, satu-satunya
yang kami sangat prihatinkan dengan hal ini

230
00: 13: 30.825 --> 00: 13: 33.776
yang pertama kali pass ketika kita mengkompilasi kode,
kami ingin mencari

231
00: 13: 33.776 --> 00: 13: 37.466
semua deklarasi variabel dan
semua cakupan yang mereka tambahkan.

232
00: 13: 37.466 --> 00: 13: 40.876
Itu bagian yang penting,
jangan khawatir tentang tokenization atau

233
00: 13: 40.876 --> 00: 13: 43.492
pohon sintaks abstrak atau
semua itu.

234
00: 13: 43.492 --> 00: 13: 47.260
Yang perlu kita pedulikan adalah bagaimana caranya
ember tersebut dibuat, dan

235
00: 13: 47.260 --> 00: 13: 49.878
bagaimana kita memilah kelereng itu
ke dalam ember yang berbeda itu?

236
00: 13: 49.878 --> 00: 13: 55.047
Masuk akal?
& gt; & gt; Kyle Simpson: Jadi untuk melakukan itu,

237
00: 13: 55.047 --> 00: 13: 59.975
Saya punya sedikit trik yang saya
lakukan ketika saya mengajarkan materi ini,

238
00: 13: 59.975 --> 00: 14: 04.243
dan itu akan terasa konyol dan
sedikit aneh.

239
00: 14: 04.243 --> 00: 14: 07.960
Jika Anda mendengarkan langsung atau
jika Anda menonton video ini nanti,

240
00: 14: 07.960 --> 00: 14: 10.568
bahkan jika kamu tidak
sebenarnya secara fisik di sini,

241
00: 14: 10.568 --> 00: 14: 14.037
Saya akan mendorong Anda untuk melakukan ini,
bahkan jika itu tampak konyol.

242
00: 14: 14.037 --> 00: 14: 18.871
Saya akan membawa Anda melalui sedikit
latihan di sini di mana kita punya

243
00: 14: 18.871 --> 00: 14: 20.977
percakapan yang nyaring.

244
00: 14: 20.977 --> 00: 14: 24.921
Dan hal-hal yang kita katakan akan terjadi
terdengar agak konyol,

245
00: 14: 24.921 --> 00: 14: 29.229
tapi tidak apa-apa karena kami hanya
melakukan ini semua bersama, oke?

246
00: 14: 29.229 --> 00: 14: 31.926
Jadi kita semua akan bersuara
konyol bersama.

247
00: 14: 31.926 --> 00: 14: 36.794
Ini adalah sedikit trik guru yang kami
gunakan untuk membantu sesuatu yang sedikit

248
00: 14: 36.794 --> 00: 14: 40.192
abstrak terjebak di dalam kepalamu,
baik?

249
00: 14: 40.192 --> 00: 14: 42.877
Jadi saya benar-benar
transparan tentang hal itu.

250
00: 14: 42.877 --> 00: 14: 46.800
Ini tujuan yang konyol karena itu membantu
sesuatu yang tidak akan Anda lakukan

251
00: 14: 46.800 --> 00: 14: 49.090
sungguh pikirkalnlah tentang hal itu.

252
00: 14: 49.090 --> 00: 14: 50.020
Ini membantunya untuk stack,

253
00: 14: 50.020 --> 00: 14: 53.540
dan yang terpenting bukan itu
Anda akan pernah mengulangi latihan ini.

254
00: 14: 53.540 --> 00: 14: 56.210
Anda tidak akan pernah benar-benar mengatakannya
hal-hal ini lagi.

255
00: 14: 56.210 --> 00: 14: 59.560
Tapi konsepnya akan stack dengan
kejam di kepalamu, oke?

256
00: 15: 00.630 --> 00: 15: 03.630
Jadi kita akan membahas percakapan

257
00: 15: 03.630 --> 00: 15: 05.689
bahwa bagian yang berbeda dari
mesin JavaScript yang kita miliki.

258
00: 15: 07.080 --> 00: 15: 09.360
Kata fancy, kita akan anthropomorphize.

259
00: 15: 09.360 --> 00: 15: 12.930
Itu berarti mengambil sesuatu itu
bukanlah manusia yang memperlakukannya seperti itu.

260
00: 15: 12.930 --> 00: 15: 17.240
Kita akan anthropomorphize bagian dari
mesin JavaScript yang relevan,

261
00: 15: 17.240 --> 00: 15: 23.580
dan menguping percakapan itu
terjadi saat kode ini sedang diproses.

262
00: 15: 23.580 --> 00: 15: 25.552
Dan saya menjadikannya sebagai percakapan

263
00: 15: 25.552 --> 00: 15: 30.423
yang kami pahami berbeda
tanggung jawab, dan bagaimana mereka dibagi.

264
00: 15: 30.423 --> 00: 15: 35.356
Jadi itulah mengapa kita berbicara seolah-olah ini adalah dua
orang yang berbeda sedang bercakap-cakap,

265
00: 15: 35.356 --> 00: 15: 38.227
dan kita akan melaluinya
ini dalam dua lintasan.

266
00: 15: 38.227 --> 00: 15: 43.300
Jadi yang pertama melewati kode ini, kami
akan melakukan langkah kompilasi itu,

267
00: 15: 43.300 --> 00: 15: 45.630
yang mencari scope leksikal.

268
00: 15: 45.630 --> 00: 15: 50.562
Dan [BATUK] kita akan mengalami
percakapan atau mendengarkan di atau

269
00: 15: 50.562 --> 00: 15: 55.249
pura-pura memiliki percakapan
antara dua entitas ini.

270
00: 15: 55.249 --> 00: 16: 00.031
Yang pertama adalah kompilator
sendiri, sebenarnya memproses kode.

271
00: 16: 00.031 --> 00: 16: 04.454
Dan yang kedua akan menjadi ruang lingkup
manajer, itu anak di taman bermain

272
00: 16: 04.454 --> 00: 16: 09.150
yang mengelola ember, dan
menaruh kelereng ke dalam ember, oke?

273
00: 16: 09.150 --> 00: 16: 14.000
Mereka berdua akan mengobrol
saat kode ini diproses, dan

274
00: 16: 14.000 --> 00: 16: 17.090
tujuannya adalah menyiapkan bucket tersebut dan
dengan benar menyortir kelereng.

275
00: 16: 18.680 --> 00: 16: 22.034
Dan percakapan itu akan terjadi
mulai sedikit sesuatu seperti ini.

276
00: 16: 22.034 --> 00: 16: 26.088
Kita akan mulai di jalur 1, kita akan
mencari deklarasi formal,

277
00: 16: 26.088 --> 00: 16: 29.920
deklarasi formal variabel, dan
deklarasi formal fungsi.

278
00: 16: 30.990 --> 00: 16: 35.310
Baris 1 adalah deklarasi variabel formal,
karena kami melihat kata kunci var di sana.

279
00: 16: 35.310 --> 00: 16: 38.670
Baris 3 adalah deklarasi fungsi formal
karena, kita melihat kata kunci fungsi di sana.

280
00: 16: 39.740 --> 00: 16: 44.251
Ada deklarasi informal,
yang tidak kita pedulikan,

281
00: 16: 44.251 --> 00: 16: 47.496
kami hanya mencari yang formal, oke?

282
00: 16: 47.496 --> 00: 16: 49.298
Jadi kita sampai ke baris 1, kita adalah penyusunnya,

283
00: 16: 49.298 --> 00: 16: 51.410
dan kita akan berbicara
ke pengaturan scope.

284
00: 16: 51.410 --> 00: 16: 54.882
Kita sampai ke baris 1, kita akan mengatakan,
Saya adalah kompilator yang berbicara,

285
00: 16: 54.882 --> 00: 16: 58.230
hey global scope manager,
karena saya dalam lingkup global, jadi

286
00: 16: 58.230 --> 00: 17: 00.467
Saya sedang berbicara dengan manajer global scope.

287
00: 17: 00.467 --> 00: 17: 03.847
Hai manajer global scope,
Saya menemukan deklarasi formal untuk foo,

288
00: 17: 03.847 --> 00: 17: 05.604
maka aku akan menanyakan pertanyaan ini.

289
00: 17: 05.604 --> 00: 17: 07.347
Saya akan mengatakan, apakah Anda pernah mendengar tentang dia?

290
00: 17: 07.347 --> 00: 17: 11.420
Sekarang, pertanyaannya mungkin tampak tidak relevan,
tetapi sebenarnya,

291
00: 17: 11.420 --> 00: 17: 16.553
pertanyaannya sangat penting,
karena pertanyaan memungkinkan Anda untuk itu

292
00: 17: 16.553 --> 00: 17: 21.377
pembagian tanggung jawab, dan
itu penting untuk menjaga tali.

293
00: 17: 21.377 --> 00: 17: 25.012
Jadi kompilator mengatakan,
Saya tidak tahu apakah variabel ini ada,

294
00: 17: 25.012 --> 00: 17: 28.538
siapa satu-satunya yang bisa menjawab
apakah kelereng ini pernah ditemukan?

295
00: 17: 28.538 --> 00: 17: 29.720
Manajer scope.

296
00: 17: 29.720 --> 00: 17: 33.466
Jadi, hei, manajer scope,
Anda pernah melihat kelereng merah ini sebelumnya?

297
00: 17: 33.466 --> 00: 17: 36.393
Saya memiliki deklarasi formal untuk suatu variabel
disebut foo, pernahkah kamu mendengar tentang dia?

298
00: 17: 36.393 --> 00: 17: 41.481
Dan hanya ada dua jawaban,
ya, atau tidak, oke?

299
00: 17: 41.481 --> 00: 17: 45.225
Dalam hal ini, apa jawabannya?
& gt; & gt; Pembicara 3: Tidak.

300
00: 17: 45.225 --> 00: 17: 46.590
& gt; & gt; Kyle Simpson: Tidak, tidak pernah mendengar tentang dia,

301
00: 17: 46.590 --> 00: 17: 51.149
tetapi sekarang setelah Anda menyebutkannya, saya akan melanjutkan
dan menaruh kelereng itu ke dalam ember merah.

302
00: 17: 51.149 --> 00: 17: 53.659
Jadi sekarang kita punya ember merah
dengan marmer merah di dalamnya.

303
00: 17: 53.659 --> 00: 17: 57.577
Variabel foo telah terdaftar
ke dalam ruang lingkup global, oke?

304
00: 17: 57.577 --> 00: 18: 01.317
Anda perhatikan kami tidak memperhatikan
apa yang sedang terjadi di sisi kanan,

305
00: 18: 01.317 --> 00: 18: 04.597
tanda yang sama, itu semua bisa dieksekusi
sebagai kode, kita akan membahasnya nanti.

306
00: 18: 04.597 --> 00: 18: 08.782
Yang kita pedulikan sekarang adalah dekorasi
formal dan memilah kelereng.

